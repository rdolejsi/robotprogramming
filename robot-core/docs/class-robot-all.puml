
@startuml

namespace Lights {
    class LightDriver as "LightDriver\n//<<Updateable>>//" {
    }

    note right of LightDriver
        Handles the light subsystem, utilizing
        NeoPixel light strip. The light placement
        on the strip is driven by the LightPlacement
        configuration, the NeoPixel device is updated
        in bulk when any light reports state change.
    end note

    class LightPlacement {
    }

    note bottom of LightPlacement
        Defines the color scheme
        and light placement by type
        used in the Joy-Car Robot.
    end note

    class Light as "Light\n//<<Updateable>>//" {
    }

    LightDriver ..> Light: "delegates light behavior\nand grabs state changes"
    LightDriver ..> LightPlacement: "loads light placement\nand color scheme"
}

namespace DriveTrain {
    class WheelDriver {
    }

    note top of WheelDriver
        Handles the movement of the whole robot
        (forward, backward, turning). Activities
        are either indefinite or conditional based
        on ticks, time or real speed measured by
        the speedometer on a wheel level.
    end note

    class Wheel as "Wheel\n//<<Updateable>>//" {
    }

    note top of Wheel
        Handles single wheel capable of moving
        forward or backward with given (variable)
        speed and stop immediately or conditionally
        based on distance and time.
    end note

    class WheelSpeedometer {
    }

    note right of WheelSpeedometer
        Speedometer is able to monitor
        the wheel movement precisely and
        provide the actual wheel rotation speed
        over the ticks measured for X consecutive
        constant time intervals.
    end note

    WheelDriver .right.> Wheel: "moves each wheel separately based\non the upper level math (curves)\nand the speedometer feedback"
    Wheel .down.> WheelSpeedometer: "allows for autonomous commands\nbased on real distance and/or real speed"
}

namespace Robot {
    class Robot {
        .... //ref// ....
        * wheel_driver: WheelDriver
        * light_driver: LightDriver
        .... //additional drivers// ....

        .... //main state machine// ....
        - alter drivers
        - get feedback
        - loop
    }
}

Robot::Robot -left-> LightDriver: "delegates light functions"
Robot::Robot -down--> WheelDriver: "delegates Robot movement"

@enduml
